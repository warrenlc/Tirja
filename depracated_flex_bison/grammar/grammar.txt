** NOTE: rules in ALL CAPS are tokens

<program>               ::=  <exp_list> SEMICOLON

<exp_list>              ::=  <expression> |
                             <exp_list> SEMICOLON <expression>
<expression>            ::=  <numeric_exp> | <boolean_expression> | <string_expression> | <conditional_expression> |
                             <for_all_exp> | <assignment_expression> | VAR_NAME | <function_call> | <array_expression>


<numeric_exp>           ::=  <value> <inc_dec>     |
                             <inc_dec>     <mumeric_exp> |
                             <unary_op>    <numeric_exp> |
                             <numeric_exp> <binary_op> <numeric_exp> | 
                             LPAREN <numeric_exp> RPAREN             |
                             <number>                                |
                             <variable_name>

<value>                 ::=  <number> | <variable_name>                             

<boolean_expression>    ::= NOT <boolean_expression>                                   |
                            <numeric_expression> <relational_op>  <numeric_expression> |
                            <boolean_expression> <binary_bool_op> <boolean_expression> |
                            LPAREN <boolean_expression> RPAREN                         |
                            <boolean_atom>                                             |
                            <variable_name>   

<string_expression>     ::= " <character_list> "

<character_list>        ::= STRING |
                            <character_list> STRING 

<conditional_expression> ::= <if_expression>    |
                             <while_expression>


<if_expression>          ::= IF <boolean_expression> THEN LBRACE <exp_list> RBRACE |
                             IF <boolean_expression> THEN LBRACE <exp_list> RBRACE ELSE LBRACE <exp_list> RBRACE |
                             IF <boolean_expression> THEN LBRACE <exp_list> RBRACE ELSE <conditional_expression>                       

<while_expression>       ::= WHILE <boolean_expression> DO LBRACE <exp_list> RBRACE |
                             DO LBRACE <exp_list> RBRACE WHILE <boolean_expression>

<for_all_exp>           ::= FOR_ALL DUMMY_VAR IN <container> DO LBRACE <exp_list> RBRACE

<container>             ::= LSQUARE RSQUARE |
                            LSQUARE <atom_list> RSQUARE

<atom_list>             ::= <atom> |
                            <atom_list> "," <atom>

<atom>                         ::= <number> | <boolean_atom> | <character_list> | <container> | <function>                        

<assignment_expression>    ::= LET FUNC_IDENTIFIER <function_assign> SEMICOLON  | /* let func f(x) = {x + 9;} */
                               LET VAR_NAME EQUAL <variable_assign>  SEMICOLON |
                               LET VAR_NAME EQUAL <array_expression> SEMICOLON 

<function_assign>       ::= VAR_NAME <arg_list>  EQUALS LBRACE <exp_list> RBRACE

<function_call>         ::= <VAR_NAME> <arg_list>

<variable_assign>       ::= <expression>

<array_expression>      ::= LSQUARE RSQUARE |
                            LSQUARE <atom_list> RSQUARE

<arg_list>              ::= LPAREN RPAREN |
                            LPAREN <atom_list> RPAREN

<block_assign>          ::= DOLLAR <exp_list> DOLLAR


<inc_dec>               ::=  INCREMENT |
                             DECREMENT

<unary_op>              ::= MINUS  |
                            BWNOT

<binary_op>             ::= POUND   |
                            TIMES   |
                            DIV     |
                            MOD     |
                            PLUS    |
                            MINUS   |
                            BWLEFT  |
                            BWRIGHT |
                            BWAND   |
                            XOR     |
                            BWOR    

<relational_op>         ::= LESS_T         |
                            GREATER_T      |
                            EQUIVALENT     |
                            LESS_T_EQ      |
                            GREATER_T_EQ   |
                            NOT_EQUIVALENT |

<binary_bool_op>        ::= AND |
                            OR  |


<boolean_atom>          ::= TRUE |
                            FALSE

<number>                ::= NUMBER

<variable_name>         ::= VAR_NAME


** TOKENS **

SEMICOLON               ::= \;                          %%
LPAREN                  ::= \(                          %%
RPAREN                  ::= \)                          %%
INCREMENT               ::= [\+]{2}                     %%
DECREMENT               ::= [\-]{2}                     %%
MINUS                   ::= [\-]{1}                     %%
BWNOT                   ::= \~                          %%
POUND                   ::= \#                          %%
TIMES                   ::= \*                          %%
DIV                     ::= \/                          %%
MOD                     ::= \%                          %%
PLUS                    ::= \+                          %%
BWLEFT                  ::= [\<]{2}                     %%
BWRIGHT                 ::= [\>]{2}                     %%
BWAND                   ::= [\&]{1}                     %%
XOR                     ::= \^                          %%
BWOR                    ::= \|                          %%
NOT                     ::= \!                          %%
AND                     ::= [\&]{2}                     %%
OR                      ::= [\|]{2}                     %%
LESS_T                  ::= \<                          %%
GREATER_T               ::= \>                          %%
EQUIVALENT              ::= [\=]{2}                     %% 
NOT_EQUIVALENT          ::= \!\=                        %%
LESS_T_EQ               ::= \<\=                        %%
GREATER_T_EQ            ::= \>\=                        %%
TRUE                    ::= "True"                      %%
FALSE                   ::= "False"                     %%
NUMBER                  ::= \d+\.?\d*                   %%
VAR_NAME                ::= [a-z\_]+[a-zA-Z\_0-9]*      %%
STRING                  ::= .*                          %%
LET                     ::= "let"                       %%
IF                      ::= "if"                        %%
WHILE                   ::= "while"                     %%
DO                      ::= "do"                        %%
THEN                    ::= "then"                      %%
LBRACE                  ::= \{                          %%
RBRACE                  ::= \}                          %%
DOLLAR                  ::= \$                          %%
LSQUARE                 ::= \[                          %%
RSQUARE                 ::= \]                          %%



